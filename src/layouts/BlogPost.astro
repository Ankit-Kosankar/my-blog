---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import { parseISO, parse } from 'date-fns';

type Props = CollectionEntry<'blog'>['data'];

function parseBlogDate(dateStr: string | Date) {
	if (dateStr instanceof Date) return dateStr;
	if (typeof dateStr !== 'string') return new Date();

	// Try ISO first
	const isoDate = parseISO(dateStr);
	if (isoDate instanceof Date && !isNaN(isoDate.valueOf())) {
		return isoDate;
	}
	// Try 'MMM dd yyyy'
	const customDate = parse(dateStr, 'MMM dd yyyy', new Date());
	if (customDate instanceof Date && !isNaN(customDate.valueOf())) {
		return customDate;
	}
	// Fallback: now
	return new Date();
}

const { title, description, pubDate, updatedDate, heroImage, tags = [], author } = Astro.props;
const parsedPubDate = parseBlogDate(pubDate);
const parsedUpdatedDate = updatedDate ? parseBlogDate(updatedDate) : undefined;

// Related posts by tag overlap (exclude current)
let related = [] as Array<{ id: string; data: any }>;
try {
  const all = await getCollection('blog');
  const currentId = Astro.params?.slug as string | undefined;
  if (Array.isArray(tags) && tags.length > 0) {
    related = all
      .filter(p => p.id !== currentId)
      .map(p => ({
        id: p.id,
        data: p.data,
        score: (p.data.tags || []).filter((t: string) => tags.includes(t)).length,
      }))
      .filter(p => p.score > 0)
      .sort((a, b) => b.score - a.score)
      .slice(0, 3);
  }
} catch {}
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<!-- BreadcrumbList JSON-LD -->
		<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {"@type": "ListItem", "position": 1, "name": "Home", "item": "{new URL('/', Astro.site)}"},
    {"@type": "ListItem", "position": 2, "name": "Blog", "item": "{new URL('/blog/', Astro.site)}"},
    {"@type": "ListItem", "position": 3, "name": "{title}", "item": "{new URL(Astro.url.pathname, Astro.site)}"}
  ]
}
		</script>
		<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "{title}",
  "description": "{description}",
  "datePublished": "{parsedPubDate.toISOString()}",
  "dateModified": "{parsedUpdatedDate ? parsedUpdatedDate.toISOString() : parsedPubDate.toISOString()}",
  "author": {"@type": "Person", "name": "{author?.name || 'Ankit Kosankar'}"},
  "image": {"@type": "ImageObject", "url": "{(heroImage && (new URL(heroImage.src, Astro.site))) || ''}"},
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "{new URL(Astro.url.pathname, Astro.site)}"
  }
}
		</script>
		<style>

			.main-container {
				padding: 2%;
			}

			main {
				width: 80%;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 3em 1em;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 100%;
				max-width: 1020px;
				margin: 0 auto;
				padding: 1em;
				color: var(--gray-dark);
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: var(--gray);
			}
			.last-updated-on {
				font-style: italic;
			}
			
			.prose p {
				font-size: 1.1rem;
				line-height: 1.7;
				margin-bottom: 1.5rem;
				color: var(--gray-dark);
			}
			
			@media (max-width: 720px) {
				main {
					width: 100%;
					padding: 1em;
				}
				
				.title h1 {
					font-size: 2rem;
				}
			}
		</style>
	</head>

	<body>
			<Header />
			<main>
				<article>
					<div class="hero-image">
						{heroImage && <Image width={1020} height={510} src={heroImage} alt="" />}
					</div>
					<div class="prose">
						<div class="title">
							<div class="date">
								<time class="blog-preview-date">
									<FormattedDate date={parsedPubDate} />
								</time>
								{
									parsedUpdatedDate && (
										<div class="last-updated-on">
											Last updated on <time class="blog-preview-date">
												<FormattedDate date={parsedUpdatedDate} />
											</time>
										</div>
									)
								}
							</div>
							<h1>{title}</h1>
							<hr />
						</div>
						<slot />
					</div>
						{related.length > 0 && (
							<section class="prose" aria-label="Related posts">
								<h2>Related posts</h2>
								<ul>
									{related.map((p) => (
										<li>
											<a href={`/blog/${p.id}/`}>{p.data.title}</a>
										</li>
									))}
								</ul>
							</section>
						)}
				</article>
			</main>
			<Footer />
	</body>
</html>
