---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import { parseISO, parse } from 'date-fns';

type Props = CollectionEntry<'blog'>['data'];

function parseBlogDate(dateStr: string | Date) {
	if (dateStr instanceof Date) return dateStr;
	if (typeof dateStr !== 'string') return new Date();

	// Try ISO first
	const isoDate = parseISO(dateStr);
	if (isoDate instanceof Date && !isNaN(isoDate.valueOf())) {
		return isoDate;
	}
	// Try 'MMM dd yyyy'
	const customDate = parse(dateStr, 'MMM dd yyyy', new Date());
	if (customDate instanceof Date && !isNaN(customDate.valueOf())) {
		return customDate;
	}
	// Fallback: now
	return new Date();
}

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
const parsedPubDate = parseBlogDate(pubDate);
const parsedUpdatedDate = updatedDate ? parseBlogDate(updatedDate) : undefined;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>

			.main-container {
				padding: 2%;
			}

			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: var(--gray-dark);
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: var(--gray);
			}
			.last-updated-on {
				font-style: italic;
			}
		</style>
	</head>

	<body>
			<Header />
			<main>
				<article>
					<div class="hero-image">
						{heroImage && <Image width={1020} height={510} src={heroImage} alt="" />}
					</div>
					<div class="prose">
						<div class="title">
							<div class="date">
								<FormattedDate date={parsedPubDate} />
								{
									parsedUpdatedDate && (
										<div class="last-updated-on">
											Last updated on <FormattedDate date={parsedUpdatedDate} />
										</div>
									)
								}
							</div>
							<h1>{title}</h1>
							<hr />
						</div>
						<slot />
					</div>
				</article>
			</main>
			<Footer />
	</body>
</html>
