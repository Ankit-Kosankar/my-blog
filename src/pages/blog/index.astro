---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import { getMediumPosts} from '../../utils/getMediumPosts';
import { parseISO, parse } from 'date-fns';

const POSTS_PER_PAGE = 5;
const page = Number(Astro.url.searchParams.get('page') || 1);

function parseBlogDate(dateStr: string | Date) {
  if (dateStr instanceof Date) return dateStr;
  if (typeof dateStr !== 'string') return new Date();

  // Try ISO first
  const isoDate = parseISO(dateStr);
  if (isoDate instanceof Date && !isNaN(isoDate.valueOf())) {
    return isoDate;
  }
  // Try 'MMM dd yyyy'
  const customDate = parse(dateStr, 'MMM dd yyyy', new Date());
  if (customDate instanceof Date && !isNaN(customDate.valueOf())) {
    return customDate;
  }
  // Fallback: now
  return new Date();
}

// Fetch local posts
const allLocalPosts = await getCollection('blog');
console.log('🔍 Debug: Found', allLocalPosts.length, 'local posts');

const localPosts = allLocalPosts.map(post => {
  const link = `/blog/${post.id.replace(/\.mdx?$/, '')}/`;
  console.log('🔗 Debug: Post', post.data.title, '->', link);
  return {
    title: post.data.title,
    link: link,
    pubDate: parseBlogDate(post.data.pubDate),
    source: 'local',
  };
});

// Fetch Medium posts
const mediumPosts = await getMediumPosts(5);

// Combine and sort
const allPosts : any = [...localPosts, ...mediumPosts].sort(
  (a, b) => b.pubDate.valueOf() - a.pubDate.valueOf()
);

// Pagination
const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);
const paginatedPosts = allPosts.slice(
  (page - 1) * POSTS_PER_PAGE,
  page * POSTS_PER_PAGE
);

type BlogPost = {
  title: string;
  link: string;
  pubDate: Date;
  source: string;
};

// const posts = (await getCollection('blog')).sort(
// 	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
// );
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: 960px;
			}
			ul {
				display: flex;
				flex-wrap: wrap;
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			ul li {
				width: calc(50% - 1rem);
			}
			ul li * {
				text-decoration: none;
				transition: 0.2s ease;
			}
			/* ul li:first-child {
				width: 100%;
				margin-bottom: 1rem;
				text-align: center;
			}
			ul li:first-child img {
				width: 100%;
			}
			ul li:first-child .title {
				font-size: 2.369rem;
			} */
			ul li img {
				margin-bottom: 0.5rem;
				border-radius: 12px;
			}
			ul li a {
				display: block;
			}
			.title {
				margin: 0;
				color: var(--black);
				line-height: 1;
			}
			.date {
				margin: 0;
				color: var(--gray);
			}
			ul li a:hover h4,
			ul li a:hover .date {
				color: var(--accent);
			}
			ul a:hover img {
				box-shadow: var(--box-shadow);
			}
			@media (max-width: 720px) {
				ul {
					gap: 0.5em;
				}
				ul li {
					width: 100%;
					text-align: center;
				}
				ul li:first-child {
					margin-bottom: 0;
				}
				ul li:first-child .title {
					font-size: 1.563em;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<section>
				<ul>
					{
					paginatedPosts.map((allPosts: BlogPost) => (
							<li>
							<a href={allPosts.link} target={allPosts.source === 'medium' ? "_blank" : "_self"}>
								{allPosts.title}
							</a>
							<span>({allPosts.source})</span>
							<FormattedDate date={allPosts.pubDate} />
							</li>
						))
					}
					
				</ul>

				<nav>
					{Array.from({ length: totalPages }, (_, i) => (
					  <a
						href={`?page=${i + 1}`}
						style={page === i + 1 ? "font-weight: bold;" : ""}
					  >
						{i + 1}
					  </a>
					))}
				  </nav>
			</section>
		</main>
		<Footer />
	</body>
</html>
